function drawChart(chartData, code){

    var options = {
        legend: 'none',
        title: code,
        titleTextStyle: {color: 'white'},
        bar: {groupWidth: '100%'},
        candlestick: {
            fallingColor: {stroke: 'white', strokeWidth: 0, fill: '#ec4899'},
            risingColor: {stroke: 'white', strokeWidth: 0, fill: '#0ea5e9'},
        },
        backgroundColor: {fill: '#334155'}, 

        hAxis: {
                gridlines: {color: 'white'},
                minorGridlines: {color: 'white'},
                textStyle: {color: 'white'}
            },

        vAxis: {
                gridlines: {color: 'white'},
                textStyle: {color: 'white'}
            }
    };
    
    var chart = new google.visualization.CandlestickChart(document.getElementById("main-chart"));
    var data = new google.visualization.DataTable(chartData, 0.6);
    chart.draw(data, options);
};

async function updateChart(code, dateTo, dateFrom) {
    let response = await fetch('/chart?q=' + code +'&to=' + dateTo + '&from=' + dateFrom)

    let chartData = await response.json()
    drawChart(chartData, code)


};

async function search(code) {
    // redeclaring this here, becuase new items are generated by this function
    let response = await fetch('/search?q=' + code);
    let searchItems = await response.json();
    
    let html = '';
    
    for (let item of searchItems){
        html += '<li class="search-link border-y border-slate-600 bg-slate-400 hover:bg-slate-600 cursor-pointer">' + item[1] + "</li>";
    } 
    document.getElementById("search-results").innerHTML = html;

    // add event listener to new search box items
    let searchLink = document.getElementsByClassName("search-link")
    for(let link of searchLink){
        link.addEventListener('click', async function () {

            let ticker = link.textContent.trim();
            document.getElementById("current-ticker").value = ticker

            updateTable(ticker)

            dateFrom = document.getElementById("dateFrom").value    
            dateTo = document.getElementById("dateTo").value
            updateChart(ticker, dateTo, dateFrom) 
        })
    }
    
    
};

// this adds event listeners to all the stock items currently on the page
 async function updatePage(page_items, dateTo, dateFrom){

    for(let i = 0; i < page_items.length; i++){

        page_items[i].addEventListener("click", async function(){
            // returns the ticker code of the element clicked on
            code = this.textContent.trim();
            document.getElementById("current-ticker").value = code;
            
            updateTable(code);
        
            // have to redeclare these here as their value is assigned after page load
            dateFrom = document.getElementById("dateFrom").value    
            dateTo = document.getElementById("dateTo").value

            updateChart(code, dateTo, dateFrom)
        
        })
    };

    let favresponse = await fetch('/retrieveFavourite')
    let result = await favresponse.json()

        // should try and find a way where we are not making 2 requests to retrieve favourite to accomplish this
        for(let item of result){
            if (document.getElementById("current-ticker").value == item["ticker"]){
    
                document.getElementById("centre-fav-add").style.visibility="hidden"
    
                break
            }
            else {
                document.getElementById("centre-fav-add").style.visibility="visible"
            }
        }

};

// updates the table of data with info from the currently selected stock item
async function updateTable(code){

    // gets table data
    let response = await fetch('/stock?q=' + code);
    let table_info = await response.json()
    // populates table
    document.getElementById("return-ticker").innerHTML = table_info.ticker
    document.getElementById("return-timestamp").innerHTML = table_info.timestamp
    document.getElementById("return-last").innerHTML = table_info.tngoLast
    document.getElementById("return-prevClose").innerHTML = table_info.prevClose
    document.getElementById("return-open").innerHTML = table_info.open
    document.getElementById("return-high").innerHTML = table_info.high
    document.getElementById("return-low").innerHTML = table_info.low
    document.getElementById("return-mid").innerHTML = table_info.mid
    document.getElementById("return-volume").innerHTML = table_info.volume
    document.getElementById("info-text").innerHTML = table_info.info
};

// updates the list of the favourites and attaches event listeners
async function updateFavourites(){
    let response = await fetch('/retrieveFavourite')
    let result = await response.json()


    // TODO: should have something in here that checks the + or - on all stock items on screen, and changes them to the appropriate sign
    // when a favourite is added or removed
    // will need to give the stock signs a specific class, then pull the class list etc..


    let html = ''
    for(let item of result){

        let icon;

        if(item["change"] > 0){
            icon = '<svg width="20px" height="20px" viewBox="0 0 16.00 16.00" fill="none" xmlns="http://www.w3.org/2000/svg" transform="rotate(0)matrix(1, 0, 0, 1, 0, 0)" stroke="#0ea5e9"><g stroke-width="0"></g><g stroke-linecap="round" stroke-linejoin="round" stroke="#0ea5e9" stroke-width="0.032"></g><g> <path d="M6 8L2 8L2 6L8 5.24536e-07L14 6L14 8L10 8L10 16L6 16L6 8Z" fill="#0ea5e9"></path> </g></svg>'
        }
        else{
            icon = '<svg width="20px" height="20px" viewBox="0 0 16.00 16.00" fill="none" xmlns="http://www.w3.org/2000/svg" transform="rotate(0)matrix(1, 0, 0, -1, 0, 0)" stroke="#ec4899"><g stroke-width="0"></g><g stroke-linecap="round" stroke-linejoin="round" stroke="#ec4899" stroke-width="0.032"></g><g> <path d="M6 8L2 8L2 6L8 5.24536e-07L14 6L14 8L10 8L10 16L6 16L6 8Z" fill="#ec4899"></path> </g></svg>'
        };

        html += '<tr class="border-y h-10 border-solid border-collapse border-slate-400 bg-slate-600 hover:bg-slate-700 stock-item">' + 
                    '<td class="ticker-code cursor-pointer">' + item["ticker"] + '</td>' + 
                    '<td>' + item["change"] + ' %' + icon +'</td>' +
                    '<td>' + 
                        '<form action="/favourite" method="get">' + 
                            '<input type="hidden" name="q" value="' + item["ticker"] + '">' + 
                            '<svg class="cursor-pointer remove_favourite" width="20px" height="20px" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg"><g> <path class="hover:stroke-slate-200" d="M6 12L18 12" stroke="#475569" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>' + 
                        '</form>' + 
                    '</td>'+
                '</tr>'    
    }
    document.getElementById("favourite-list").innerHTML = html

    // think the sign switch will need to go here

    // add event listeners to the remove sign
    let removeFavourites = document.getElementsByClassName("remove_favourite")
    for(let item of removeFavourites){

        item.addEventListener('click', async function(){
            await fetch('/favourite?q=rm&ticker=' + item.previousElementSibling.value)
            updateFavourites()
        })
    }

    //redeclaring as these lists have been updated
    stockItems = document.getElementsByClassName("ticker-code")
    dateFrom = document.getElementById("dateFrom").value    
    dateTo = document.getElementById("dateTo").value
    
    updatePage(stockItems, dateFrom, dateTo)
};
